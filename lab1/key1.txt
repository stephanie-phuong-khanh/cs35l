Name:   Stephanie Doan
ID:     604981556
TA:     Kedar Deshpande

Exercise 1.1 - Moving around in Emacs
2. C-s H T M L Enter
3. C-s s c a v e n g e r Enter M-b
4. C-s s e l f - r e f e r e n t i a l Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
10. C-x C-c

Exercise 1.2 - Deleting text in Emacs
2. M-g M-g 1 8 Enter C-SP C-e Backspace
3. C-s D E L Enter C-a C-k
4. C-s h t t p s : / / e n . w i k i C-s Enter C-a C-p C-SP C-n C-n C-e C-w
5. C-s < ! Enter C-b C-b C-SP C-f C-f C-f C-f C-f C-f C-f C-w
    C-s < ! Enter C-a C-SP C-n C-n C-n C-e C-w
    C-s < ! Enter C-a C-SP C-e C-w

Exercise 1.3 - Inserting text in Emacs
2. C-s A s s i g n m e n t SP 1 M-% A s s i g n m e n t SP 4 2 Enter y y
3. M-< C-s U T F - 8 M-% U S - A S C I I Enter y
4. C-M-s [ ^ [ : a s c i i : ] ] Enter C-a C-k
5. C-s < / o l > Enter Enter
6. C-x C-c y

Exercise 1.4 - Other editing tasks in Emacs
3. M-> C-r < ! Enter C-SP C-e M-w M-g M-g 400 Enter C-y Enter
4. M-> C-r < ! C-r Enter C-SP C-e C-u 3 C-n M-w M-g M-g 385 Enter C-y
    M-> C-r < ! C-r C-r C-a C-f C-SP C-e M-w M-g M-g 384 Enter C-SP C-e Backspace C-y 
    M-> C-r < ! C-r C-r C-r Enter C-SP C-e C-n C-n M-w M-g M-g 340 Enter C-y
    M-> C-r < ! C-r C-r C-r C-r Enter C-SP C-e M-w M-g M-g 127 Enter C-y
    M-> C-r < ! C-r C-r C-r C-r C-r Enter C-SP C-e M-g M-g M-g 18 Enter C-y 
5. C-s - - - SP e Enter C-a C-SP M-> C-w
6. C-x u
7. M-> C-r - - - SP e Enter C-a < ! - - M-> - - >
8. M-< C-s < o l > M-% < o L > Enter y y y y y y y
    Found and replaced 7 instances of <ol>

Exercise 1.5 - Doing commands in Emacs
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter
    (copy and paste from website by highlighting text, C-c, pasting in hello.c with C-v)
3. M-x c o m p i l e Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace 
    g c c h e l l o . c Enter
4. C-x b h e l l o - o u t Enter
    C-u M-! . / a . o u t Enter
5. M-< C-SP M-> M-w C-x C-f k e y 1 . t x t M-> C-y
#include <stdio.h>
int
main (void) 
{    
  char n = '\n', b = '\\', q = '"';           
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  
  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n); 
  return 0; 
}

Exercise 1.6 - Running Elisp code
1. C-x b Enter
2. ( r a n d o m " 6 0 4 - 9 8 1 - 5 5 6 " ) C-j
    Result: -2094893596172740827
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
    ( s e t q SP y SP ( r a n d o m ) ) C-j
4 ( * SP x SP y ) C-j
    The result is incorrect because if x is 993005394579354532 and y is -1229947763971374906, the
    mathematically correct product of them will be much greater in magnitude than -68144013051596584 
    which is outputted when executing (* x y). This incorrectness is due to overflow.
5. M - : ( * SP x SP y ) C-j
    M-: returns three products: first is decimal product, second is octal, third is hexadecimal
6. No, the random integers are not truly random. As stated in the Elisp documentation, the random function
    returns a pseudo-random integer because a deterministic computer program follows rules to generate 
    the numbers, but the generated values mimic truly random numbers such as through equally likely occurence
    of values. 
7. 
    We evaluate the chance of overflow resulting from multiplying two randomly generated integers. The two
    randomly generated integers can range anywhere from INT_MIN [-2^(n-1)] to INT_MAX [2^(n-1)-1], n being
    the number of bits to represent an integer in binary (depending on machine). When we multiply integers
    x and y, there is an overflow when x*y > INT_MAX or when x*y < INT_MIN. 
    
    So, I graphed x and y on a 2D coordinate plane, integer x on the x-axis and integer y on the y-axis. 
    I then graphed the equation y = INT_MAX/x, which forms a very steep hyperbola. The total area
    x * y, which is INT_MAX^2, describes all the combinations of x and y. The area where y > INT_MAX/x 
    describes the combinations of x and y that will yield an overflowed product. To find this area, I integrated
    f(x) = INT_MAX/x from x=1 (if x=0, the integral is unsolvable because it diverges) to x=INT_MAX, and
    I added 1*INT_MAX to account for using x=1 instead of x=0. I subtracted this sum from INT_MAX^2, and divided it
    by INT_MAX^2, to find the approximated probability that the two-variable product of randomly generated
    integers will overflow.

    So, assuming at 32-bit integer, the chance of overflow is:
                     x=2^31
        [(2^31)^2 -(integral (2^31/x)dx + (2^31))] / [(2^31)^2]   =   ((2^31)^2 - (46144189313 + 2^31)) / (2^31)^2
                     x=1
        =  0.99999998952
    which means there is an almost 100% probability of overflow from x*y.

