Q1.
The patch decreases the performance of ls program. After examining
the patch itself, I see that the patched program will check the order
of the A and a flags, which requires more calculation than the default
-a overriding -A flag. 


Q2.
Introducing a change to Coreutils may cause discrepancies between
programs that used the old (faulty) ls command. Those programs may
have depended on the output of -a overriding -A flag, so when the
patch is applied, the output of "ls -aA" is different, so the old
programs will not run as expected.


Q3.
Running "python randlines.py /dev/null" outputs:

File "randline.py", line 70, in <module>
    main()
File "randline.py", line 64, in main
    sys.stdout.write(generator.chooseline())
File "randline.py", line 34, in chooseline
    return random.choice(self.lines)
File "/usr/lib64/python2.7/random.py", line 274, in choice
    return seq[int(self.random() * len(seq))]  
        # raises IndexError if seq is empty
IndexError: list index out of range

The randline class essentially reads the contents of the 
provided argument, in this case /dev/null file. Then the
chooseline function calles the random.choice(seq) where seq
is a nonempty sequence from which random.choice chooses a 
pseudo) random element. Here, the /dev/null file is empty,
so random.choice is called on an empty sequence which raises
the IndexError. The main function of the randlines.py file 
fails to check the number of lines in the input file (numlines)
is equal to zero; it only checks for numlines<0. Therefore, the
chooseline function is called on this invalid input.


Q4.
Runing the program with Python3 outputs this error:

File "randline.py", line 65
except IOError as (errno, strerror):
                      ^
SyntaxError: invalid syntax

This is because Python3 no longer uses this syntax for exception,
for Python2 makes exceptions iterable and therefore can be accessed
with (errno, strerror). Python3 makes this syntax valid:
    except IOError as e:
Then, we can unpack e to examine the exception's property.
